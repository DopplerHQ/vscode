import { EventEmitter, FileSystemProvider, FileChangeEvent, Event, FileType, Uri, Disposable, FileChangeType } from "vscode";
import * as yaml from "yaml";
import * as helpers from "../helpers";
import * as doppler from "../doppler";
import { TextEncoder, TextDecoder } from "util";

export default class DopplerFileSystemProvider implements FileSystemProvider {
  // Required part of the FileSystemProvider interface
  private _emitter = new EventEmitter<FileChangeEvent[]>();
  private needsRefresh = false;
  readonly onDidChangeFile: Event<FileChangeEvent[]> = this._emitter.event;

  generateYAMLMessage() {
    const padding = 3;
    const lines = [
      "This file was generated by Doppler. When you make",
      "changes to this file, they will be saved to your",
      "config in Doppler as well.",
      "",
      "A `null` value indicates that the secret is restricted.",
      "Restricted secrets may be overwritten but cannot be read.",
    ];
    const longestLineLength = Math.max(...lines.map((el) => el.length)) + 1;
    const paddingSpaces = Array(padding).join(" ");
    const borderLeftRight = "##";
    const formattedLines = lines.map(function (line) {
      return [
        borderLeftRight,
        paddingSpaces,
        line + Array(longestLineLength - line.length).join(" "),
        paddingSpaces,
        borderLeftRight,
      ].join("");
    });

    const bordersTopBottom = Array(formattedLines[0].length + 1).join("#");
    return [bordersTopBottom, ...formattedLines, bordersTopBottom].join("\n");
  }

  jsonToYAML(secrets: doppler.DopplerSecrets) {
    const comment = this.generateYAMLMessage();
    const yamlFile = yaml.stringify(secrets, null, {
      indent: 2,
      sortMapEntries: true,
    });

    return `${comment}\n\n${yamlFile}`;
  }

  async getContent(uri: Uri) {
    const { project, config } = helpers.parser.fromURI(uri);
    return this.jsonToYAML(await doppler.secrets.fetchRaw(project, config));
  }

  async stat(uri: Uri) {
    if (this.needsRefresh) {
      setTimeout(() => {
        this._emitter.fire([{ uri: uri, type: FileChangeType.Changed }]);
      }, 0);
      this.needsRefresh = false;
    }

    return {
      type: FileType.File,
      // vscode will stat and readFile for each file read, it's much less expensive to report a 0-size file.
      // This doesn't seem to have a significant impact otherwise.
      size: 0,
      ctime: Date.now(),
      mtime: Date.now(),
    };
  }

  async readFile(uri: Uri) {
    const content = await this.getContent(uri);
    return new TextEncoder().encode(content);
  }

  async writeFile(uri: Uri, content: Uint8Array, options: { create: boolean; overwrite: boolean }) {
    const { project, config } = helpers.parser.fromURI(uri);
    const existing_secrets = await doppler.secrets.fetchRaw(project, config);
    const new_secrets = yaml.parse(new TextDecoder().decode(content)) as doppler.DopplerSecrets;
    const changed_secrets: doppler.DopplerSecretsUpdate = {};

    // Detect changes
    for (const [name, value] of Object.entries(new_secrets)) {
      if (existing_secrets[name] !== value) {
        changed_secrets[name] = value;
      }
    }

    // Mark deleted secrets as null
    for (const name of Object.keys(existing_secrets)) {
      if (new_secrets[name] === undefined) {
        changed_secrets[name] = null;
      }
    }

    // Save only if there are changes
    if (Object.keys(changed_secrets).length > 0) {
      await doppler.secrets.update(project, config, changed_secrets);
    }
    this.needsRefresh = true;
  }

  watch(uri: Uri): Disposable {
    // ignore, fires for all changes...
    /* eslint @typescript-eslint/no-empty-function: "off" */
    return new Disposable(() => {});
  }

  async rename(oldUri: Uri, newUri: Uri, options: { overwrite: boolean }) {
    throw new Error("DopplerFileSystemProvider: Rename operations are not allowed");
  }

  async delete(uri: Uri) {
    throw new Error("DopplerFileSystemProvider: Delete operations are not allowed");
  }

  async createDirectory(uri: Uri) {
    throw new Error("DopplerFileSystemProvider: Create directory operations are not allowed");
  }

  async readDirectory(uri: Uri): Promise<[string, FileType][]> {
    throw new Error("DopplerFileSystemProvider: Read directory operations are not allowed");
  }
}

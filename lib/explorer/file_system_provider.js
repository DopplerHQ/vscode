const vscode = require("vscode");
const yaml = require("yaml");
const helpers = require("../helpers");
const doppler = require("../doppler");

class DopplerFileSystemProvider {
  // Required function for class
  onDidChangeFile() {}

  async fetchSecrets(project, config) {
    const secrets = await doppler.secrets.fetchRaw(project, config);

    // Filter out Doppler reserved
    for (const name of ["PROJECT", "ENVIRONMENT", "CONFIG"]) {
      delete secrets[`DOPPLER_${name}`];
    }

    return secrets;
  }

  generateYAMLMessage() {
    const padding = 3;
    const lines = [
      "This file was generated by Doppler. When you make",
      "changes to this file, they will be saved to your",
      "config in Doppler as well.",
    ];
    const longestLineLength = Math.max(...lines.map((el) => el.length)) + 1;
    const paddingSpaces = Array(padding).join(" ");
    const borderLeftRight = "##";
    const formattedLines = lines.map(function (line) {
      return [
        borderLeftRight,
        paddingSpaces,
        line + Array(longestLineLength - line.length).join(" "),
        paddingSpaces,
        borderLeftRight,
      ].join("");
    });

    const bordersTopBottom = Array(formattedLines[0].length + 1).join("#");
    return [bordersTopBottom, ...formattedLines, bordersTopBottom].join("\n");
  }

  jsonToYAML(secrets) {
    const yamlFile = yaml.stringify(secrets, null, {
      indent: 2,
      sortMapEntries: true,
    });

    return [this.generateYAMLMessage(), yamlFile].join("\n\n");
  }

  async stat(uri) {
    const content = await this.readFile(uri);

    return {
      type: vscode.FileType.File,
      size: content.length,
      ctime: Date.now(),
      mtime: Date.now(),
    };
  }

  async readFile(uri) {
    const { project, config } = helpers.parser.fromURI(uri);
    const content = this.jsonToYAML(await this.fetchSecrets(project, config));
    return new TextEncoder().encode(content);
  }

  async writeFile(uri, content) {
    const { project, config } = helpers.parser.fromURI(uri);
    const existing_secrets = await this.fetchSecrets(project, config);
    const new_secrets = yaml.parse(new TextDecoder().decode(content));
    const changed_secrets = {};

    // Detect changes
    for (const [name, value] of Object.entries(new_secrets)) {
      if (existing_secrets[name] !== value) {
        changed_secrets[name] = value;
      }
    }

    // Mark deleted secrets as null
    for (const name of Object.keys(existing_secrets)) {
      if (new_secrets[name] === undefined) {
        changed_secrets[name] = null;
      }
    }

    // Save only if there are changes
    if (Object.keys(changed_secrets).length > 0) {
      await doppler.secrets.update(project, config, changed_secrets);
    }
  }

  async rename() {
    this._throwError("Rename operations are not allowed");
  }

  async delete() {
    this._throwError("Delete operations are not allowed");
  }

  async createDirectory() {
    this._throwError("Create directory operations are not allowed");
  }

  async readDirectory() {
    this._throwError("Read directory operations are not allowed");
  }

  _throwError(message) {
    throw new vscode.FileSystemError.Unavailable(
      `DopplerFileSystemProvider: ${message}`
    );
  }
}

module.exports = DopplerFileSystemProvider;
